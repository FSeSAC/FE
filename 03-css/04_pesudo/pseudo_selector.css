.div1 {
    width: 100px;
    height: 100px;
    background-color: aquamarine;
}

/* `:hover` : 요소에 마우스를 올릴 때 */
.div1:hover {
    width: 150px;
    height: 150px;
    background-color: pink;
}

/* `:active` : 요소를 마우스로 클릭하고 있을 때 */
.div1:active {
    width: 200px;
    height: 200px;
    background-color: greenyellow;
}

/* `:focus` : 요소의 포커스가 될 때 */
input:focus {
    width: 200px;
    height: 50px;
    background-color: violet;
    color: lightblue;
    outline-color: yellowgreen;
}

.links > a:hover {
    background-color: coral;
}

.links > a:visited {
    color: green;
}

/* 요소 상황에 따른 가상 클래스 선택자 */
.raniland > * {
    background-color: burlywood;
    color: white;
}

/* 1. `E:first-child` : E(요소)가 첫번째 요소라면 */
.raniland > *:first-child {
    background-color: red;
}

/* 2. `E:last-child` : E(요소)가 마지막 요소라면 */
.raniland > :last-child {
    background-color: black;
}

/* 가상요소: before, after */
/* 
    -html 문서의 특정 부분을 스타일링 하기 위해 사용.
    -실제로 html문서에 존재하지 않는 부분이지만 css를 통해 스타일 적용이 가능.
    가상클래스 : & 가상요소 :: 차이?
    -css 사양이 발전하면서 가상클래스와 가상 요소를 명확하게 구분할 필요성이 생김.
    - 가상 클래스: 문서의 기존 요소 상태를 나타냄
    - 가상 요소: 문서의 특정 부분을 생성하여 스타일링함
    그렇기에 구분하기 위해서 ::로 표기하는 새로운 표기법을 도입.
*/


.box::before{
    content: "택시"
}
.box::after{
    content: "빨리"
}